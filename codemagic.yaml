workflows:
  build-ios:
    name: Build iOS with iOS 13.0 and Generate IPA
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Install Flutter dependencies
        script: |
          flutter pub get
          
      - name: Setup iOS project and create/fix Podfile
        script: |
          echo "Setting up iOS project for deployment target 13.0..."
          
          # Certifica que o diretório ios existe
          mkdir -p ios/Runner.xcodeproj
          mkdir -p ios/Flutter
          
          # Remove arquivos antigos se existirem
          cd ios
          rm -rf Pods Podfile.lock
          cd ..
          
          # Cria ou substitui o Podfile com configuração correta
          cat > ios/Podfile << 'EOF'
          platform :ios, '13.0'
          
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          
          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }
          
          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end
          
            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
          end
          
          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
          
          flutter_ios_podfile_setup
          
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
          
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
              end
            end
          end
          EOF
          
          echo "Podfile created/updated successfully!"
          
      - name: Fix iOS deployment target in project files
        script: |
          echo "Fixing iOS deployment target in project files..."
          
          # Corrige o project.pbxproj se existir
          if [ -f "ios/Runner.xcodeproj/project.pbxproj" ]; then
            echo "Updating project.pbxproj..."
            sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 13.0/g' ios/Runner.xcodeproj/project.pbxproj
          fi
          
          # Corrige AppFrameworkInfo.plist se existir
          if [ -f "ios/Flutter/AppFrameworkInfo.plist" ]; then
            echo "Updating AppFrameworkInfo.plist..."
            /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 13.0" ios/Flutter/AppFrameworkInfo.plist 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :MinimumOSVersion string 13.0" ios/Flutter/AppFrameworkInfo.plist
          fi
          
      - name: Install CocoaPods dependencies
        script: |
          echo "Installing CocoaPods dependencies..."
          cd ios && pod install --verbose
          
      - name: Build iOS without signing
        script: |
          echo "Building iOS app without code signing..."
          flutter build ios --release --no-codesign
          
      - name: Create unsigned IPA
        script: |
          echo "Creating unsigned IPA..."
          mkdir -p build/ios/iphoneos
          
          # Encontra o arquivo .app gerado
          APP_PATH=$(find build/ios/iphoneos -name "*.app" | head -n 1)
          if [ -z "$APP_PATH" ]; then
            APP_PATH="build/ios/iphoneos/Runner.app"
          fi
          
          # Verifica se o .app existe na localização padrão do Flutter
          if [ ! -d "$APP_PATH" ]; then
            echo "Looking for .app in Flutter build directory..."
            FLUTTER_APP_PATH=$(find build/ios/iphoneos -name "*.app" -o -path "*/Release-iphoneos/*.app" | head -n 1)
            if [ -n "$FLUTTER_APP_PATH" ]; then
              APP_PATH="$FLUTTER_APP_PATH"
            else
              echo "Error: Could not find .app file"
              echo "Build directory contents:"
              find build -name "*.app" -type d
              exit 1
            fi
          fi
          
          echo "Found .app at: $APP_PATH"
          
          # Cria um diretório Payload e copia o .app
          rm -rf Payload
          mkdir Payload
          cp -r "$APP_PATH" Payload/
          
          # Cria o IPA (que é apenas um ZIP renomeado)
          zip -r build/ios/iphoneos/Runner-unsigned.ipa Payload
          
          # Remove o diretório temporário
          rm -rf Payload
          
          echo "Unsigned IPA created successfully!"
          echo "Generated files:"
          ls -la build/ios/iphoneos/
          
    artifacts:
      - build/ios/iphoneos/*.ipa
      - build/ios/iphoneos/*.app
      
    publishing:
      email:
        recipients:
          - paulojustino.dev@gmail.com
        notify:
          success: true
          failure: true